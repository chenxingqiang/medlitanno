name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, "3.10", "3.11"]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install pytest pytest-cov
    
    - name: Lint with flake8
      run: |
        pip install flake8
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Test imports
      run: |
        python -c "import medlitanno; print('✅ Core package imports successfully')"
        python -c "import medlitanno.annotation; print('✅ Annotation module imports successfully')"
        python -c "import medlitanno.common; print('✅ Common module imports successfully')"
    
    - name: Test basic functionality
      run: |
        python -c "
        from medlitanno.annotation import MedicalAnnotationLLM
        print('✅ MedicalAnnotationLLM class can be imported')
        from medlitanno.common import LLMClient
        print('✅ LLMClient class can be imported')
        "
    
    - name: Run unit tests
      run: |
        pytest tests/ -v

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Run security checks
      run: |
        pip install safety bandit
        # Check for known security vulnerabilities
        safety check --json || true
        # Check for common security issues in Python code
        bandit -r src/ -f json || true

  documentation:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Check documentation
      run: |
        # Check if README exists and has content
        if [ -s README.md ]; then
          echo "✅ README.md exists and has content"
        else
          echo "❌ README.md is missing or empty"
          exit 1
        fi
        
        # Check if license exists
        if [ -s LICENSE ]; then
          echo "✅ LICENSE file exists"
        else
          echo "❌ LICENSE file is missing"
          exit 1
        fi
        
        # Check if docs directory exists
        if [ -d docs ]; then
          echo "✅ docs directory exists"
        else
          echo "❌ docs directory is missing"
          exit 1
        fi 